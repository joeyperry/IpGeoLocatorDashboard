AWSTemplateFormatVersion: '2010-09-09'
Description: "TBD"

Parameters:

  SourceFlowLogGroupName:
    Description: Name of the source VPC Flow Log log group in CloudWatch Logs 
    Type: String
    Default: "/aws/vpcflowlogs3"

  IotTopicName:
    Description: Topic name for event flow in IoT 
    Type: String
    Default: "ipgeolocator/publish"

Resources:

  FlowLogExportLambdaProcessorRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Action: sts:AssumeRole
          Principal:
              Service:
                - "lambda.amazonaws.com"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
  
  FlowLogExportLambdaProcessorPolicy:
    Type: AWS::IAM::Policy
    Properties:
      Roles: [ !Ref FlowLogExportLambdaProcessorRole ]
      PolicyName: FlowLogExportLambdaProcessorPolicy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
        - Sid: PublishToIot
          Effect: Allow
          Action:
          - iot:Publish
          Resource:
          - !Join [ "", [ "arn:aws:iot:", !Ref "AWS::Region", ":", !Ref "AWS::AccountId", ":topic/", !Ref IotTopicName ] ]

  FlowLogExportLambdaProcessorFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Handler: index.lambda_handler
      MemorySize: 128
      Role: !GetAtt FlowLogExportLambdaProcessorRole.Arn
      Runtime: python3.6
      Timeout: 120
      Environment:
        Variables:
          IOT_TOPIC_NAME: !Ref IotTopicName
      Code:
        ZipFile: |
          import boto3
          import gzip
          import json
          import logging
          import os
          import io
          import base64
          from botocore.vendored import requests
          import ipaddress

          logging.basicConfig(format='%(levelname)s:%(asctime)s %(message)s',
                              datefmt='%m/%d/%Y %I:%M:%S %p', level=logging.INFO)
          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          # create IoT data plane client
          iot_client = boto3.client('iot-data')


          # convert VPC Flow Log format to JSON
          def vpcfl_to_json(payload):
              split_payload = payload.split(" ")
              json_payload = {
                  'version': split_payload[0],
                  'account-id': split_payload[1],
                  'interface-id': split_payload[2],
                  'srcaddr': split_payload[3],
                  'dstaddr': split_payload[4],
                  'srcport': split_payload[5],
                  'dstport': split_payload[6],
                  'protocol': split_payload[7],
                  'packets': int(split_payload[8]),
                  'bytes': int(split_payload[9]),
                  'start': split_payload[10],
                  'end': split_payload[11],
                  'action': split_payload[12],
                  'log-status': split_payload[13]
              }
              return json_payload


          def get_geolocation_data(source_ip):
              try:
                  return requests.get('http://ip-api.com/json/' + source_ip).json()
              except Exception as e:
                  logger.info("Error retrieving geolocation data...")
                  logger.error(e)
                  return None


          def lambda_handler(event, context):

              logger.info(json.dumps(event))

              decodedLogsData = base64.b64decode(event['awslogs']['data'])
              # decompress and extract data from payload
              in_ = io.BytesIO()
              in_.write(decodedLogsData)
              in_.seek(0)
              with gzip.GzipFile(fileobj=in_, mode='rb') as payload:
                  gunzipped_bytes_obj = payload.read()

              allEvents = json.loads(gunzipped_bytes_obj.decode())

              for log_event in allEvents['logEvents']:

                  log_event_json = vpcfl_to_json(str(log_event['message']))
                  logger.info(log_event_json)
                  if not ipaddress.ip_address(log_event_json['srcaddr']).is_private:
                      log_event_json['geodata'] = get_geolocation_data(
                                                  log_event_json['srcaddr'])
                      logger.info(iot_client.publish(
                          topic=os.environ['IOT_TOPIC_NAME'],
                          qos=1,   # at least once
                          payload=bytes(json.dumps(log_event_json), "utf-8")
                          )
                      )
                  else:
                      logger.info("Source IP is private. Ignoring...")


  FlowLogExportLambdaProcessorInvokePermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      Principal: !Join [ "", [ "logs.", !Ref "AWS::Region", ".amazonaws.com" ] ]
      SourceArn: !Join [ "", [ "arn:aws:logs:", !Ref "AWS::Region", ":", !Ref "AWS::AccountId", ":log-group:", !Ref SourceFlowLogGroupName, ":*" ] ]
      FunctionName: !GetAtt FlowLogExportLambdaProcessorFunction.Arn
   
  FlowLogExportSubscriptionFilter:
    Type: "AWS::Logs::SubscriptionFilter"
    Properties: 
      DestinationArn: !GetAtt FlowLogExportLambdaProcessorFunction.Arn
      FilterPattern: ""
      LogGroupName: !Ref SourceFlowLogGroupName
    DependsOn: FlowLogExportLambdaProcessorInvokePermission

  WebSocketsIdentityPool:
    Type: "AWS::Cognito::IdentityPool"
    Properties:
      AllowUnauthenticatedIdentities: true

  WebSocketsIdentityPoolRoleAttachment:
    Type: "AWS::Cognito::IdentityPoolRoleAttachment"
    Properties:
      IdentityPoolId: !Ref WebSocketsIdentityPool
      #RoleMappings: 
      #  String to RoleMapping object map
      Roles: 
        #authenticated: !GetAtt  WebSocketsIdentityPoolAuthenticatedRole.Arn
        unauthenticated: !GetAtt  WebSocketsIdentityPoolUnauthenticatedRole.Arn

  WebSocketsIdentityPoolUnauthenticatedRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal: 
              Federated: "cognito-identity.amazonaws.com"
            Action: 
              - "sts:AssumeRoleWithWebIdentity"
            Condition:
              StringEquals: 
                "cognito-identity.amazonaws.com:aud": !Ref WebSocketsIdentityPool
              "ForAnyValue:StringLike":
                "cognito-identity.amazonaws.com:amr": "unauthenticated"
      Policies:
        - PolicyName: "CognitoUnauthorizedPolicy"
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - Effect: "Allow"
                Action:
                  - "iot:Subscribe"
                  - "iot:Connect"
                  - "iot:Receive"
                  - "iot:GetThingShadow"
                #Resource: !Join [ "", [ "arn:aws:iot:", !Ref "AWS::Region", ":", !Ref "AWS::AccountId", ":topic/", !Ref IotTopicName ] ]
                Resource: "*"
              - Effect: "Allow"
                Action:
                  - "cognito-identity:*"
                  - "cognito-sync:*"
                Resource: "*"

  #WebSocketsIdentityPoolAuthenticatedRole:
  #  Type: "AWS::IAM::Role"
  #  Properties:
  #    AssumeRolePolicyDocument: 
  #      Version: "2012-10-17"
  #      Statement:
  #        - Effect: "Allow"
  #          Principal: 
  #            Federated: "cognito-identity.amazonaws.com"
  #          Action: 
  #            - "sts:AssumeRoleWithWebIdentity"
  #          Condition:
  #            StringEquals: 
  #              "cognito-identity.amazonaws.com:aud": !Ref WebSocketsIdentityPool
  #            "ForAnyValue:StringLike":
  #              "cognito-identity.amazonaws.com:amr": authenticated
  #    Policies:
  #      - PolicyName: "CognitoAuthorizedPolicy"
  #        PolicyDocument: 
  #          Version: "2012-10-17"
  #          Statement: 
  #            - Effect: "Allow"
  #              Action:
  #                - "iot:Subscribe"
  #                - "iot:Connect"
  #                - "iot:Receive"
  #              Resource: !Join [ "", [ "arn:aws:iot:", !Ref "AWS::Region", ":", !Ref "AWS::AccountId", ":topic/", !Ref IotTopicName ] ]

Outputs:

  WebSocketsIdentityPoolId:
    Value: !Ref WebSocketsIdentityPool